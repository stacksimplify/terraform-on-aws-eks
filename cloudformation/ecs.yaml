AWSTemplateFormatVersion: '2010-09-09'
Description: ECS Cluster CloudFormation Template

Parameters:
  CertificateArn:
    Type: String
    Default: 'arn:aws:acm:us-east-1:567344542386:certificate/0c0b7e07-90f1-46e3-b0fc-59d05533a580'

Resources:
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: vpc-0d0ca7cf6976f5aa0
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: Test-SG

  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyLoadBalancer
      Subnets:
      - subnet-0dc7b92449c5d29b8 # Replace with your subnet ID
      - subnet-0ad1a97e3cab3d3c5 # Replace with your subnet ID
      SecurityGroups:
      - !Ref InstanceSecurityGroup # Replace with your security group ID
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '60'
      Tags:
      - Key: Name
        Value: TestLoadBalancer

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      # will look for a 200 status code by default unless specified otherwise
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Name: TestTG
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: vpc-0d0ca7cf6976f5aa0

  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: redirect
        RedirectConfig:
          Protocol: HTTPS
          Port: '443'
          StatusCode: HTTP_301
      LoadBalancerArn: !Ref MyLoadBalancer
      Port: 80
      Protocol: HTTP

  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref TargetGroup
        Type: forward
      LoadBalancerArn: !Ref MyLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
      - CertificateArn: !Ref CertificateArn

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      CapacityProviders:
      - FARGATE_SPOT
      - FARGATE
      ClusterName: MyCluster
      ClusterSettings:
      - Name: containerInsights
        Value: enabled
      Tags:
      - Key: environment
        Value: production

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: ECSExecutionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:CreateLogGroup
            Resource: '*'

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ecs-role
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: 'sts:AssumeRole'

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/fargate-task-definition

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: LogGroup
    Properties:
      Family: my-fargate-task
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      Cpu: 256
      Memory: 0.5GB
      ExecutionRoleArn: !Ref ExecutionRole
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
      - Name: my-container
        Image: public.ecr.aws/z6g3n4u4/nginx:latest
        PortMappings:
        - ContainerPort: 80
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-region: us-east-1
            awslogs-group: !Ref LogGroup
            awslogs-stream-prefix: ecs

  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - HTTPListener
      - HTTPSListener
    Properties:
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - !Ref InstanceSecurityGroup # Replace with your security group ID
          Subnets:
          - subnet-0dc7b92449c5d29b8 # Replace with your subnet ID
          - subnet-0ad1a97e3cab3d3c5 # Replace with your subnet ID
      LoadBalancers:
      - TargetGroupArn: !Ref TargetGroup
        ContainerPort: 80
        ContainerName: my-container
      Cluster: !Ref ECSCluster

  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: vardhmangarmants.store
      Name: nginx.vardhmangarmants.store
      Type: A
      AliasTarget:
        DNSName: !GetAtt MyLoadBalancer.DNSName
        HostedZoneId: !GetAtt MyLoadBalancer.CanonicalHostedZoneID
