import "strings"
import "types"

_modules = {
	"root": {
		"data": {
			"aws_ami": {
				"amzlinux": {
					"config": {
						"filter": [
							{
								"name": "name",
								"values": [
									"amzn2-ami-hvm-*-gp2",
								],
							},
							{
								"name": "root-device-type",
								"values": [
									"ebs",
								],
							},
							{
								"name": "virtualization-type",
								"values": [
									"hvm",
								],
							},
							{
								"name": "architecture",
								"values": [
									"x86_64",
								],
							},
						],
						"most_recent": true,
						"owners": [
							"amazon",
						],
					},
					"provisioners": null,
					"references": {
						"filter": [
							{
								"name":   [],
								"values": [],
							},
							{
								"name":   [],
								"values": [],
							},
							{
								"name":   [],
								"values": [],
							},
							{
								"name":   [],
								"values": [],
							},
						],
						"most_recent": [],
						"owners":      [],
					},
				},
			},
		},
		"modules": {},
		"outputs": {
			"ec2_instance_publicip": {
				"depends_on":  [],
				"description": "EC2 Instance Public IP",
				"references": [
					"aws_instance.my-ec2-vm",
				],
				"sensitive": false,
				"value":     undefined,
			},
			"ec2_publicdns": {
				"depends_on":  [],
				"description": "Public DNS URL of an EC2 Instance",
				"references": [
					"aws_instance.my-ec2-vm",
				],
				"sensitive": false,
				"value":     undefined,
			},
		},
		"providers": {
			"aws": {
				"alias": {
					"": {
						"config": {},
						"references": {
							"region": [
								"var.aws_region",
							],
						},
						"version": "~> 3.0",
					},
				},
				"config": {},
				"references": {
					"region": [
						"var.aws_region",
					],
				},
				"version": "~> 3.0",
			},
		},
		"resources": {
			"aws_instance": {
				"my-ec2-vm": {
					"config": {
						"key_name":  "terraform-key",
						"user_data": null,
					},
					"provisioners": null,
					"references": {
						"ami": [
							"data.aws_ami.amzlinux",
						],
						"instance_type": [
							"var.instance_type",
						],
						"key_name": [],
						"tags": [
							"count.index",
						],
						"user_data": [],
						"vpc_security_group_ids": [
							"aws_security_group.vpc-ssh",
							"aws_security_group.vpc-web",
						],
					},
				},
			},
			"aws_security_group": {
				"vpc-ssh": {
					"config": {
						"description": "Dev VPC SSH",
					},
					"provisioners": null,
					"references": {
						"description": [],
						"name": [
							"terraform.workspace",
						],
					},
				},
				"vpc-web": {
					"config": {
						"description": "Dev VPC web",
					},
					"provisioners": null,
					"references": {
						"description": [],
						"name": [
							"terraform.workspace",
						],
					},
				},
			},
		},
		"variables": {
			"aws_region": {
				"default":     null,
				"description": "Region in which AWS Resources to be created",
			},
			"instance_type": {
				"default":     null,
				"description": "EC2 Instance Type - Instance Sizing",
			},
		},
	},
}

module_paths = [
	[],
]

module = func(path) {
	if types.type_of(path) is not "list" {
		error("expected list, got", types.type_of(path))
	}

	if length(path) < 1 {
		return _modules.root
	}

	addr = []
	for path as p {
		append(addr, "module")
		append(addr, p)
	}

	return _modules[strings.join(addr, ".")]
}

data = _modules.root.data
modules = _modules.root.modules
providers = _modules.root.providers
resources = _modules.root.resources
variables = _modules.root.variables
outputs = _modules.root.outputs
